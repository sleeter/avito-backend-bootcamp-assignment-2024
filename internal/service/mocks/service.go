// Code generated by MockGen. DO NOT EDIT.
// Source: ./deps.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	pgdb "backend-bootcamp-assignment-2024/internal/pkg/pgdb"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionManager is a mock of TransactionManager interface.
type MockTransactionManager struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionManagerMockRecorder
}

// MockTransactionManagerMockRecorder is the mock recorder for MockTransactionManager.
type MockTransactionManagerMockRecorder struct {
	mock *MockTransactionManager
}

// NewMockTransactionManager creates a new mock instance.
func NewMockTransactionManager(ctrl *gomock.Controller) *MockTransactionManager {
	mock := &MockTransactionManager{ctrl: ctrl}
	mock.recorder = &MockTransactionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionManager) EXPECT() *MockTransactionManagerMockRecorder {
	return m.recorder
}

// ReadonlyTx mocks base method.
func (m *MockTransactionManager) ReadonlyTx(ctx context.Context, callback pgdb.TransactionCallback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadonlyTx", ctx, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadonlyTx indicates an expected call of ReadonlyTx.
func (mr *MockTransactionManagerMockRecorder) ReadonlyTx(ctx, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadonlyTx", reflect.TypeOf((*MockTransactionManager)(nil).ReadonlyTx), ctx, callback)
}

// Tx mocks base method.
func (m *MockTransactionManager) Tx(ctx context.Context, callback pgdb.TransactionCallback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx", ctx, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tx indicates an expected call of Tx.
func (mr *MockTransactionManagerMockRecorder) Tx(ctx, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockTransactionManager)(nil).Tx), ctx, callback)
}
