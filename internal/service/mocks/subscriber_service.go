// Code generated by MockGen. DO NOT EDIT.
// Source: ./subscriber_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	request "backend-bootcamp-assignment-2024/internal/model/dto/request"
	entity "backend-bootcamp-assignment-2024/internal/model/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockSubscriberRepository is a mock of SubscriberRepository interface.
type MockSubscriberRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberRepositoryMockRecorder
}

// MockSubscriberRepositoryMockRecorder is the mock recorder for MockSubscriberRepository.
type MockSubscriberRepositoryMockRecorder struct {
	mock *MockSubscriberRepository
}

// NewMockSubscriberRepository creates a new mock instance.
func NewMockSubscriberRepository(ctrl *gomock.Controller) *MockSubscriberRepository {
	mock := &MockSubscriberRepository{ctrl: ctrl}
	mock.recorder = &MockSubscriberRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriberRepository) EXPECT() *MockSubscriberRepositoryMockRecorder {
	return m.recorder
}

// AddSub mocks base method.
func (m *MockSubscriberRepository) AddSub(ctx context.Context, req request.Subscriber) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSub", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSub indicates an expected call of AddSub.
func (mr *MockSubscriberRepositoryMockRecorder) AddSub(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSub", reflect.TypeOf((*MockSubscriberRepository)(nil).AddSub), ctx, req)
}

// GetSubsByHouseId mocks base method.
func (m *MockSubscriberRepository) GetSubsByHouseId(ctx context.Context, houseId int32) ([]entity.Subscriber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubsByHouseId", ctx, houseId)
	ret0, _ := ret[0].([]entity.Subscriber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubsByHouseId indicates an expected call of GetSubsByHouseId.
func (mr *MockSubscriberRepositoryMockRecorder) GetSubsByHouseId(ctx, houseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubsByHouseId", reflect.TypeOf((*MockSubscriberRepository)(nil).GetSubsByHouseId), ctx, houseId)
}

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockSender) SendEmail(ctx context.Context, recipient, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, recipient, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockSenderMockRecorder) SendEmail(ctx, recipient, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockSender)(nil).SendEmail), ctx, recipient, message)
}
