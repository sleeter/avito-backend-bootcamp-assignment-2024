// Code generated by MockGen. DO NOT EDIT.
// Source: ./deps.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	squirrel "github.com/Masterminds/squirrel"
	gomock "github.com/golang/mock/gomock"
	v4 "github.com/jackc/pgx/v4"
)

// MockQueryManager is a mock of QueryManager interface.
type MockQueryManager struct {
	ctrl     *gomock.Controller
	recorder *MockQueryManagerMockRecorder
}

// MockQueryManagerMockRecorder is the mock recorder for MockQueryManager.
type MockQueryManagerMockRecorder struct {
	mock *MockQueryManager
}

// NewMockQueryManager creates a new mock instance.
func NewMockQueryManager(ctrl *gomock.Controller) *MockQueryManager {
	mock := &MockQueryManager{ctrl: ctrl}
	mock.recorder = &MockQueryManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryManager) EXPECT() *MockQueryManagerMockRecorder {
	return m.recorder
}

// QuerySq mocks base method.
func (m *MockQueryManager) QuerySq(ctx context.Context, query squirrel.Sqlizer) (v4.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySq", ctx, query)
	ret0, _ := ret[0].(v4.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySq indicates an expected call of QuerySq.
func (mr *MockQueryManagerMockRecorder) QuerySq(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySq", reflect.TypeOf((*MockQueryManager)(nil).QuerySq), ctx, query)
}
